<?xml version="1.0" encoding="UTF-8"?>

<rule-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.optimyth.com/schema/definitions/rule" version="1.0">
	<rule id="CUS.OTHER.PMD.APEX.ApexSuggestUsingNamedCred">
		<java-class>com.als.core.NullRule</java-class>
		<java-version>1.8</java-version>
		<tags>apex</tags>
		<reference><![CDATA[https://pmd.github.io/pmd/pmd_rules_apex_security.html#apexsuggestusingnamedcred]]></reference>

		<parameters/>
		<code-examples>
			<code-example id="codeExample">
				<ko><![CDATA[

public class Foo {
    public void foo(String username, String password) {
        Blob headerValue = Blob.valueOf(username + ':' + password);
        String authorizationHeader = 'BASIC ' + EncodingUtil.base64Encode(headerValue);
        req.setHeader('Authorization', authorizationHeader);
    }
}

        ]]></ko>
				<ok><![CDATA[]]></ok>
			</code-example>
		</code-examples>
    
    	<incompatibilities />
		<related-rules />

		<criteria-values>
			<criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OTHER" />
			<criterium-value ref="OPT.CRITERIUM_VALUE.PRIORITY.MEDIUM" />
			<criterium-value ref="OPT.CRITERIUM_VALUE.REPAIR_DIFFICULTY.LOW" />
			<criterium-value ref="OPT.CRITERIUM_VALUE.ENGINE.OTHER" />
			<criterium-value ref="OPT.CRITERIUM_VALUE.CQM.SECURITY" />
			<criterium-value ref="OPT.CRITERIUM_VALUE.VULNERABILITY_TYPE.OTHER"/>
		</criteria-values>

		<i18ns>
			<i18n ref="OPT.LANGUAGE.ENGLISH">
				<name><![CDATA[Suggest named credentials for authentication]]></name>
				<message><![CDATA[]]></message>
				<description><![CDATA[
Detects hardcoded credentials used in requests to an endpoint.

You should refrain from hardcoding credentials:
  * They are hard to mantain by being mixed in application code
  * Particularly hard to update them when used from different classes
  * Granting a developer access to the codebase means granting knowledge
     of credentials, keeping a two-level access is not possible.
  * Using different credentials for different environments is troublesome
     and error-prone.

Instead, you should use *Named Credentials* and a callout endpoint.

For more information, you can check [this](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_callouts_named_credentials.htm)
        ]]></description>
				<benefits><![CDATA[]]></benefits>
				<drawbacks><![CDATA[]]></drawbacks>
				<parameters/>
			</i18n>
		</i18ns>

	</rule>
</rule-definition>
